# Authentication and Authorization in  Microservices
Reading:  https://medium.com/tech-tajawal/microservice-authentication-and-authorization-solutions-e0e5e74b248a
## In monolithic applications
- Quá trình authen:

![](https://cdn-images-1.medium.com/max/800/1*Vgz8vTZM9M0yL5MSMVnMWA.png)
- Quá trình author:

![](https://cdn-images-1.medium.com/max/800/1*ZDiEGuk2Ty77ac02Zu0cRQ.png)

## In microservice architecture
### Problems:
  - Authentication and authorization logic needs to be handled in each microservice
  - Microservices should follow the principle of single responsibility. A microservice only handles a single business logic. The global logic of authentication and authorization should not be placed in the microservice implementation.
  - The authentication and authorization in the microservices architecture involves scenarios that are more complex, involving users accessing microservice applications, third-party applications accessing microservice applications, and multiple microservice applications accessing each other

### Solutions:
#### Quản lý session phân tán
- Sử dụng Sticky session: Which ensures that all requests from a specific user will be sent to the same server who handled the first request corresponding to that user, thus ensuring that session data is always correct for a certain user => Depend on load balancers
- Session replication: Mọi service đều có tất cả thông tin các session và được đồng bộ.
- Sử dụng một central storage lưu session(thường dùng)

 ![](https://cdn-images-1.medium.com/max/800/1*rOWDd5yOprS79BWqoq9jwg.png)

#### Client Token (thường dùng JWT): 
![](https://cdn-images-1.medium.com/max/800/0*4e6oPp1HYrmDm2CH.png)

#### Single sign-on: 
- Users only need to log in to the application once, then they can access all the microservices in the application. 
- This solution means that each user-oriented service must interact with the authentication service

![](https://cdn-images-1.medium.com/max/800/1*92FJfJOi0vTrJ2tvD_8Apw.png)

#### Client Token with API Gateway
- All requests go through the API gateway, effectively hiding the microservices
- On request, the API gateway translates the original user token into an opaque token that only itself can resolve

![](https://cdn-images-1.medium.com/max/800/1*2V7W9hSBns86HubojFPHiw.png)

#### Third-party application access
##### API Token: 
- The third party uses an application-issued API Token to access the application’s data. The Token is generated by the user in the application and provided for use by third-party applications.
- Github provides the Personal API Token function: Users can create a Token in Github’s developer settings interface, and then use the Token to access the Github API. When creating a Token, you can set which data the Token can access to the user, such as viewing Repo information, deleting Repo, viewing user information, updating user information, and so on.
##### OAuth:
- when a third-party application accesses a service, the application prompts the user to authorize a third-party application to use the corresponding access authority and generates a token for access according to the user’s permissions.
- The purpose of using OAuth for user authorization of third-party application access and microservices is different.
- Microservices are authorization and resource servers in the OAuth architecture. The purpose of the latter is to integrate and utilize the OAuth authentication service provided by a well-known authentication provider, which simplifies the cumbersome registration operation, in this case the microservice act the role of the client in the OAuth architecture.
![](https://cdn-images-1.medium.com/max/800/1*_N-sDzqIAsa7XoGDS88Ppw.png)

## Conclusion
- Use OAuth and JWT together. 
- OAuth is generally used in third-party access scenarios to manage external permissions, so it is more suitable for integration with API gateways and of course, the underlying Token standard JWT is also possible.
- The JWT is more lightweight, and for access authentication between microservices it is already sufficient. 

=> Using OAuth2 setup for authenticating multiple API platforms and applications, both in both public and private settings is a much more sensible way of doing things. JSON web tokens can work as your bearer tokens here and make life easier.